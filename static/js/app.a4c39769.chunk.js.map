{"version":3,"sources":["assets/xmenu.png","components/ThemedSafeAreaView.tsx","screens/AboutScreen.tsx","store/index.tsx","screens/GameScreen.tsx","screens/LeaderboardScreen.tsx","screens/MainScreen.tsx","screens/NewMatchScreen.tsx","screens/MatchesScreen.tsx","App.tsx"],"names":["module","exports","ThemedSafeAreaView","withStyles","props","eva","style","restProps","SafeAreaView","view","theme","backgroundColor","flex","AboutScreen","getAllKeys","a","async","AsyncStorage","navigate","this","navigation","justifyContent","alignItems","Image","source","require","width","height","category","color","onPress","Linking","openURL","React","Component","persistConfig","key","storage","withTime","reducer","prepare","payload","time","Date","now","matchSlice","createSlice","name","initialState","players","games","rounds","matchId","lastChange","reducers","reset","state","startMatch","action","loadMatch","gameResult","length","winner","winnerIndex","startNextGame","teams","push","game","togglePlayer","player","find","x","active","toggleGameResult","roundIndex","round","removeGame","splice","persistedReducer","persistReducer","actions","store","createStore","persistor","persistStore","_gameString","index","GameScreen","reportResult","gameIndex","fullWidth","Dimensions","get","View","padding","flexDirection","paddingTop","FlatList","data","renderItem","item","keyExtractor","textAlign","connector","connect","LeaderboardScreen","selectedIndex","getPlayerScores","playerScores","map","i","getRandomTeams","activePlayers","filter","p","shuffledPlayers","_","shuffle","splitPoint","Math","floor","random","slice","gameRunning","isOver","sortedPlayers","cloneDeep","sort","y","lastScore","tieIndex","ranks","thisScore","toString","remainingGamesWithIndex","remainingFixedGames","fixedPosition","remainingRandomGames","remainingGames","onSelect","isNaN","setState","title","rank","points","onLongPress","Alert","alert","text","cancelable","appearance","marginTop","LeaderboardEntry","styles","lbEntryContainer","marginLeft","marginRight","fill","GameListEntry","join","UnplayedGameListEntry","StyleSheet","create","MainScreen","Constants","manifest","version","PlatformScrollView","Platform","OS","children","ScrollView","NewMatchScreen","getGamesFromText","gameNames","split","trim","game2position","gamesWithPos","test","parseInt","match","isUniq","uniq","positions","Object","values","groupBy","pickBy","keys","value","max","gamesNoPos","difference","unusedPos","range","Array","substr","indexOf","getPlayersFromText","word","getDuplicatePlayers","playerText","gameText","TouchableWithoutFeedback","Keyboard","dismiss","margin","multiline","scrollEnabled","onChangeText","duplicates","e","includes","undefined","convertGameTypeFromStringInPlace","MatchesScreen","importMatch","Clipboard","m","JSON","parse","id","getItem","removeMatch","removeItem","getMatches","then","matches","multiGet","startsWith","raw_matches","b","console","error","window","confirm","ToastAndroid","show","SHORT","alignSelf","MatchEntry","lastPlayed","toDateString","currentGame","Stack","createNativeStackNavigator","subscribe","getState","setItem","stringify","App","Fragment","icons","EvaIconsPack","mapping","darkTheme","loading","NavigationContainer","Navigator","initialRouteName","screenOptions","headerShown","Screen","component"],"mappings":"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","file":"static/js/app.a4c39769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xmenu.45ba07c6.png\";","import React from 'react';\nimport { withStyles } from '@ui-kitten/components';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst StyledSafeAreaView = (props: any) => {\n  const { eva, style, ...restProps } = props;\n    \n  return (\n    <SafeAreaView {...restProps} style={[eva.style.view, style]} />\n  );\n};\n\nexport const ThemedSafeAreaView = withStyles(StyledSafeAreaView, (theme) => ({\n  view: {\n    backgroundColor: theme['background-basic-color-1'],\n    flex: 1,\n  },\n}));","import React from \"react\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Image, Linking } from \"react-native\";\nimport { ThemedSafeAreaView } from \"../components/ThemedSafeAreaView\"\nimport { Layout, Button, Text } from \"@ui-kitten/components\";\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { RootStackParamList } from \"../App\";\n\nclass AboutScreen extends React.Component<NativeStackScreenProps<RootStackParamList,\"About\">,{}> {\n    constructor(props: NativeStackScreenProps<RootStackParamList,\"About\">) {\n      super(props);\n      this.getAllKeys()\n    }\n    getAllKeys = async () => {\n      let keys: readonly string[] = []\n      try {\n        keys = await AsyncStorage.getAllKeys()\n      } catch(e) {\n        // read key error\n      }\n    \n      //console.log(keys)\n      // example console.log result:\n      // ['@MyApp_user', '@MyApp_key']\n    }\n    render() {\n      const {navigate} = this.props.navigation;\n      return (\n        <ThemedSafeAreaView>\n          <Layout style={{flex: 1, justifyContent: 'space-around', alignItems: 'center'}}>\n            <Image source={require('../assets/xmenu.png')} style={{width: 250, height: 200}}/>\n            <Text category=\"h3\">About X</Text>\n            <Text>\n              For a description of how to play the game please see: <Text style={{color: 'blue'}}\n              onPress={() => Linking.openURL('https://github.com/iimog/x-game-master')}>\n                X Game Manager Website.{\" \"}\n              </Text>\n              This app is open source, please report bugs and suggestions at the website as well.\n              \n              Data Privacy: \n              This app does not collect any user data.\n  Nor does it share any user information with any third party.\n            </Text>\n            <Button onPress={() => {navigate('Main')}}> Back </Button>\n          </Layout>\n        </ThemedSafeAreaView>\n      );\n    }\n  }\n\n  export default AboutScreen;","import { createStore, StoreCreator } from 'redux'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport _ from 'lodash'\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage\n}\n\nexport type Player = {\n  name: string,\n  active: boolean\n}\n\nexport type Game = {\n  name: string,\n  fixedPosition: boolean\n}\n\nexport type Round = {\n  game: Game,\n  teams: [Array<Player>, Array<Player>],\n  winner: -1 | 0 | 1\n}\n\nexport type State = {\n    players: Array<Player>,\n    games: Array<Game>,\n    rounds: Array<Round>,\n    matchId: number,\n    lastChange: number,\n}\n\nexport type Match = {\n  players: Array<Player>,\n  games: Array<Game>,\n  rounds: Array<Round>,\n  lastChange: number\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n  games: [],\n  rounds: [],\n  matchId: -1,\n  lastChange: -1,\n};\n\nfunction withTime<T>(reducer: (state: State, action: PayloadAction<T & { time: number }>)=>any){\n return  {\n   reducer,\n   prepare(payload: T){\n     return { payload: {...payload, time: Date.now()}}\n   }\n }\n}\n\n// TODO can I check payload types?\nconst matchSlice = createSlice({\n  name: 'match',\n  initialState: INITIAL_STATE,\n  reducers: {\n    reset(state){\n      state.rounds = []; \n      state.lastChange = -1; \n      state.matchId = -1\n    },\n    startMatch: withTime<{players: Player[], games: Game[]}>((state, action) => {\n      return {\n        players: action.payload.players,\n        games: action.payload.games,\n        rounds: [],\n        matchId: action.payload.time,\n        lastChange: action.payload.time,\n      }\n    }),\n    loadMatch(state, action: PayloadAction<State>){\n      return action.payload\n    },\n    gameResult: withTime<{winnerIndex: 0|-1|1}>((state, {payload}) => {\n      state.rounds[state.rounds.length-1].winner = payload.winnerIndex\n      state.lastChange = payload.time\n    }),\n    startNextGame: withTime<{teams: [Player[], Player[]]}>((state, {payload: {teams, time}}) => {\n      state.rounds.push({\n        teams,\n        game: state.games[state.rounds.length],\n        winner: -1\n      })\n      state.lastChange = time\n    }),\n    togglePlayer(state, action: PayloadAction<string>){\n      const player = state.players.find(x => x.name == action.payload)\n      if(player){\n        player.active = !player.active\n      }\n    },\n    toggleGameResult: withTime<{roundIndex: number}>((state, { payload: {roundIndex, time}}) => {\n      const round = state.rounds[roundIndex]\n      round.winner = round.winner == 0 ? 1 : 0\n      state.lastChange = time\n    }),\n    removeGame: withTime<{roundIndex: number}>((state, {payload: {roundIndex, time}}) => {\n      state.games.splice(roundIndex, 1)\n      if(state.rounds.length > roundIndex){\n        state.rounds.splice(roundIndex, 1)\n      }\n      state.lastChange = time\n    })\n  }\n})\n\ndeclare const dispatch: import(\"@reduxjs/toolkit\").Dispatch;\n//dispatch(matchSlice.actions.startMatch({  }))\n\nconst persistedReducer = persistReducer(persistConfig, matchSlice.reducer)\n\nexport const { actions } = matchSlice\nexport const store = createStore(persistedReducer)\nexport const persistor = persistStore(store)","import { Button, Layout, Text } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { FlatList, View, Dimensions } from \"react-native\";\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThemedSafeAreaView } from \"../components/ThemedSafeAreaView\";\nimport { State, actions, Game } from \"../store\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../App\";\n\nfunction _gameString(index: number, game: Game){\n  let prefix = (index+1)+\". \"\n  return prefix+game.name\n}\n\nclass GameScreen extends React.Component<NativeStackScreenProps<RootStackParamList, \"Game\"> & PropsFromRedux, {}>{// & {players: Array<Player>, rounds: Array<Round>, games: Array<string>},{}> {\n  reportResult: (index: -1|0|1) => void = (index) => {\n    this.props.gameResult({winnerIndex: index})\n  }\n  gameIndex: number = this.props.rounds.length - 1;\n  game: string = _gameString(this.gameIndex,this.props.games[this.gameIndex]);\n  render() {\n    const teams = this.props.rounds[this.gameIndex].teams;\n    const fullWidth = Dimensions.get('window').width;\n    return (\n      <ThemedSafeAreaView>\n      <Layout style={{flex: 1}}>\n        <View style={{flex: 1, width: fullWidth, justifyContent: \"space-around\", alignItems: \"center\", padding: 15}}>\n          <Text category=\"h1\">{this.game}</Text>\n          <View style={{flex: 1, flexDirection: \"row\", justifyContent: 'space-around', alignItems: 'flex-start', paddingTop: 30}}>\n            <FlatList\n              data={teams[0]}\n              renderItem={({item}) => <Text category=\"h4\">{item.name}</Text>}\n              keyExtractor={item => item.name}\n            />\n            <FlatList\n              data={teams[1]}\n              renderItem={({item}) => <Text category=\"h4\" style={{textAlign: \"right\"}}>{item.name}</Text>}\n              keyExtractor={item => item.name}\n            />\n          </View>\n          <View style={{flex: 1, flexDirection: \"row\", width: fullWidth, justifyContent: \"space-around\", alignItems: 'baseline'}}>\n            <Button\n                onPress={() => {\n                  this.reportResult(0)\n                  this.props.navigation.navigate('Leaderboard')\n                }}\n            >Win Team1</Button>\n            <Button\n                onPress={() => {\n                  this.reportResult(1)\n                  this.props.navigation.navigate('Leaderboard')\n                }}\n            >Win Team2</Button>\n          </View>\n        </View>\n      </Layout>\n      </ThemedSafeAreaView>\n    );\n  }\n}\n\nconst connector = connect((state: State) => state, actions)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(GameScreen)\n","import React from \"react\";\nimport { StyleSheet, View, Dimensions, Alert } from \"react-native\";\nimport { Layout, Button, Text, List, ListItem, Icon, Tab, TabView } from \"@ui-kitten/components\";\nimport { Player, Round, actions, Game } from \"../store\";\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThemedSafeAreaView } from \"../components/ThemedSafeAreaView\";\nimport _ from \"lodash\";\nimport { State } from '../store'\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../App\";\n\nclass LeaderboardScreen extends React.Component<NativeStackScreenProps<RootStackParamList, \"Leaderboard\"> & PropsFromRedux, { selectedIndex: number }> {\n  state = { selectedIndex: 0 }\n\n  getPlayerScores = () => {\n    let playerScores: { [player: string]: number } = {};\n    const { rounds, players } = this.props;\n    players.map(x => playerScores[x.name] = 0);\n    for (let i = 0; i < rounds.length; i++) {\n      let round = rounds[i]\n      if (round.winner === 0 || round.winner === 1) {\n        round.teams[round.winner].map(player => playerScores[player.name] += (i + 1));\n      }\n    }\n    return playerScores;\n  }\n  getRandomTeams= (players: Array<Player>) => {\n    let activePlayers = players.filter(p => p.active)\n    let shuffledPlayers = _.shuffle(activePlayers);\n    let splitPoint = Math.floor(activePlayers.length / 2)\n    if (activePlayers.length % 2) {\n      splitPoint += _.random();\n    }\n    let teams: [Player[], Player[]] = [shuffledPlayers.slice(0, splitPoint), shuffledPlayers.slice(splitPoint)]\n    return teams;\n  }\n  render() {\n    const { navigate } = this.props.navigation;\n    const fullWidth = Dimensions.get('window').width;\n    const gameIndex = this.props.rounds.length - 1;\n    const gameRunning = gameIndex >= 0 && this.props.rounds[gameIndex].winner == -1;\n    let playerScores = this.getPlayerScores();\n    let isOver = this.props.rounds.length >= this.props.games.length && !gameRunning;\n    let sortedPlayers = _.cloneDeep(this.props.players).sort((x, y) => playerScores[y.name] - playerScores[x.name])\n    let lastScore = -1;\n    let tieIndex = -1;\n    let ranks = sortedPlayers.map((player, index) => {\n      let thisScore = playerScores[player.name];\n      if (thisScore == lastScore) {\n        return (tieIndex + 1).toString();\n      } else {\n        lastScore = thisScore;\n        tieIndex = index;\n        return (index + 1).toString();\n      }\n    });\n    if (isOver) {\n      ranks = ranks.map(x => x == '1' ? '🏆' : x);\n    }\n    let remainingGamesWithIndex = this.props.games.map((x,i) => ({game:x, gameIndex:(i+1).toString()})).slice(this.props.rounds.length);\n    let remainingFixedGames = remainingGamesWithIndex.filter(x => x.game.fixedPosition)\n    let remainingRandomGames = remainingGamesWithIndex.filter(x => !x.game.fixedPosition)\n    if(remainingRandomGames.length > 0){\n      remainingRandomGames = _.shuffle(remainingRandomGames.map(x => ({...x, gameIndex:\"?\"})))\n    }\n    let remainingGames = [...remainingFixedGames, ...remainingRandomGames]\n    return (\n      <ThemedSafeAreaView>\n        <TabView\n          selectedIndex={this.state.selectedIndex}\n          onSelect={(index) => {if(!isNaN(index)){this.setState({ selectedIndex: index })}}}\n          style={{ flex: 1 }}>\n          <Tab title='Leaderboard'>\n            <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n              <View style={{ width: fullWidth, padding: 15 }}>\n                <List\n                  data={sortedPlayers}\n                  renderItem={({ item, index }: {item: Player, index: number}) => {\n                    return (\n                      <ListItem onPress={() => {\n                        this.props.togglePlayer(sortedPlayers[index].name)\n                      }}>\n                        <LeaderboardEntry rank={ranks[index]} name={item.name} points={playerScores[item.name]} active={item.active} />\n                      </ListItem>\n                    )\n                  }\n                  }\n                  keyExtractor={item => item.name}\n                />\n              </View>\n            </Layout>\n          </Tab>\n          <Tab title='Games'>\n            <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n              <View style={{ width: fullWidth, padding: 15 }}>\n                <List\n                  data={this.props.rounds}\n                  renderItem={({ item, index }: {item: Round, index: number}) => {\n                    return (\n                      <ListItem key={index} onLongPress={() => {\n                        Alert.alert(\n                          'Rewrite history?',\n                          'Change winner or remove (no undo for that)?',\n                          [\n                            {\n                              text: 'Change winner',\n                              onPress: () => this.props.toggleGameResult({roundIndex: index})\n                            },\n                            {\n                              text: 'Remove',\n                              onPress: () => this.props.removeGame({roundIndex: index}),\n                              style: 'destructive'\n                            },\n                            {\n                              text: 'Cancel',\n                              style: 'cancel',\n                            },\n                          ],\n                          { cancelable: true },\n                        );\n\n                      }}>\n                        <GameListEntry gameIndex={index} name={item.game.name} winner={item.winner} teams={item.teams} />\n                      </ListItem>\n                    )\n                  }\n                  }\n                />\n                <Text category=\"h4\" appearance=\"hint\" style={{ marginTop: 25 }}>{remainingGames.length > 0 ? \"Remaining games:\" : \"\"}</Text>\n                <List\n                  data={remainingGames}\n                  renderItem={({ item, index }: { item: {game: Game, gameIndex: string}, index: number }) => {\n                    return (\n                      <ListItem key={index}>\n                        <UnplayedGameListEntry gameIndex={item.gameIndex} name={item.game.name} />\n                      </ListItem>\n                    )\n                  }\n                  }\n                />\n              </View>\n            </Layout>\n          </Tab>\n        </TabView>\n        <Button onPress={() => {\n          if (isOver) {\n            navigate('Main');\n          } else {\n            if (!gameRunning) {\n              let teams = this.getRandomTeams(this.props.players)\n              this.props.startNextGame({teams})\n            }\n            navigate('Game')\n          }\n        }\n        }>\n          {isOver ? \"Back to Main\" : (gameRunning ? \"Back to Game\" : \"Next Game\")}\n        </Button>\n      </ThemedSafeAreaView>\n    );\n  }\n}\nconst connector = connect((state: State) => state, actions)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(LeaderboardScreen)\n\nclass LeaderboardEntry extends React.Component<{ rank: string, name: string, points: number, active: boolean }, {}> {\n  render() {\n    const appearance = this.props.active ? \"default\" : \"hint\";\n    return (\n      <View style={styles.lbEntryContainer}>\n        <Text category=\"h3\" appearance={appearance}>{this.props.rank}</Text>\n        <View style={{ flex: 1, marginLeft: 10 }}><Text category=\"h3\" appearance={appearance}>{this.props.name}</Text></View>\n        <Text style={{ marginRight: 10 }} category=\"h3\" appearance={appearance}>{this.props.points.toString()}</Text>\n        <Icon name={this.props.active ? 'checkmark-circle-2' : 'checkmark-circle-2-outline'} width={25} height={25} fill=\"#fff\" />\n      </View>\n    );\n  }\n}\n\nclass GameListEntry extends React.Component<{ gameIndex: number, name: string, winner: -1|0|1, teams: Array<Array<Player>> }, {}> {\n  render() {\n    const appearance = this.props.winner >= 0 ? \"default\" : \"hint\";\n    return (\n      <View style={styles.lbEntryContainer}>\n        <Text category=\"h3\" appearance={appearance}>{(this.props.gameIndex + 1).toString()}.</Text>\n        <View style={{ flex: 2, marginLeft: 10 }}><Text category=\"h3\" appearance={appearance}>{this.props.name}</Text></View>\n        <Text style={{ flex: 1, marginRight: 10 }}>\n          {this.props.winner < 0 ? '...running...' : this.props.teams[this.props.winner].map(x => x.name).join(\", \")}\n        </Text>\n      </View>\n    );\n  }\n}\n\nclass UnplayedGameListEntry extends React.Component<{ gameIndex: string, name: string }, {}> {\n  render() {\n    const appearance = \"hint\";\n    return (\n      <View style={styles.lbEntryContainer}>\n        <Text category=\"h3\" appearance={appearance}>{this.props.gameIndex}.</Text>\n        <View style={{ flex: 1, marginLeft: 10 }}><Text category=\"h3\" appearance={appearance}>{this.props.name}</Text></View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  lbEntryContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n});","import React from \"react\";\nimport { Image } from \"react-native\";\nimport { Layout, Button, Text } from \"@ui-kitten/components\";\nimport { Round } from \"../store\";\nimport { ThemedSafeAreaView } from \"../components/ThemedSafeAreaView\";\nimport Constants from 'expo-constants';\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../App\";\n\nclass MainScreen extends React.Component<NativeStackScreenProps<RootStackParamList,\"Main\"> & {rounds: Array<Round>},{}> {\n    //constructor(props) {\n    //  super(props);\n    //}\n    render() {\n      const {navigate} = this.props.navigation;\n      return (\n        <ThemedSafeAreaView>\n          <Layout style={{flex: 1, justifyContent: 'space-around', alignItems: 'center'}}>\n            <Image source={require('../assets/xmenu.png')} style={{width: 250, height: 200}}/>\n            <Button onPress={() => {navigate('NewMatch')}}> New Match </Button>\n            <Button onPress={() => {navigate('Matches')}}> Matches </Button>\n            <Button onPress={() => {navigate('About')}}> App Info </Button>\n            <Text appearance=\"hint\">Version {Constants.manifest?.version || \"?\"}</Text>\n          </Layout>\n        </ThemedSafeAreaView>\n      );\n    }\n  }\n\nexport default MainScreen\n  ","import React, { FunctionComponent } from \"react\";\nimport { TouchableWithoutFeedback, Keyboard, Alert, Dimensions, ScrollView, View, Platform } from \"react-native\";\nimport { Layout, Button, Input, Text, Icon } from \"@ui-kitten/components\";\nimport { Player, State, actions, Game } from \"../store\";\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThemedSafeAreaView } from \"../components/ThemedSafeAreaView\";\nimport _ from \"lodash\";\nimport InputScrollView from \"react-native-input-scroll-view\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../App\";\n\ntype PSVType = {\n  fullWidth: number\n}\nconst PlatformScrollView: FunctionComponent<PSVType> = (props) => {\n  if(Platform.OS === \"ios\" || Platform.OS === \"android\"){\n    return <InputScrollView style={{flex:1, width: props.fullWidth, padding: 15}}>{props.children}</InputScrollView>\n  }\n  return <ScrollView style={{flex:1, width: props.fullWidth, padding: 15}}>{props.children}</ScrollView>\n}\n\nclass NewMatchScreen extends React.Component<NativeStackScreenProps<RootStackParamList,\"NewMatch\"> & PropsFromRedux,{playerText: string, gameText: string}> {\n    constructor(props: NativeStackScreenProps<RootStackParamList,\"NewMatch\"> & PropsFromRedux) {\n      super(props);\n      this.state = {\n        playerText: this.props.players.map(p => p.name).join(\"\\n\"),\n        gameText: this.props.games.map((x,i)=>(x.fixedPosition ? `${i+1}. ` : \"\") + x.name).join(\"\\n\"),\n      };\n    }\n    getGamesFromText: (text: string) => Array<Game> = (text) => {\n      let gameNames = _.shuffle(text.split('\\n').filter(x => x.trim().length > 0))\n      let games = gameNames.map(x => {return {name: x, fixedPosition: false}})\n      let game2position: { [name: string] : number; } = {}\n      let gamesWithPos = gameNames.filter(x => /^[1-9]\\d*\\. ?/.test(x))\n      gamesWithPos.map(x => game2position[x] = parseInt(x.match(/^(\\d+)\\. ?/)![1]))\n      const isUniq = (a: Array<string|number>) => _.uniq(a).length == a.length \n      if(gamesWithPos.length > 0){\n        let positions = Object.values(game2position)\n        if(!isUniq(gamesWithPos)){\n          let dups = _(gamesWithPos).groupBy().pickBy(x => x.length > 1).keys().value()\n          throw `Duplicate game positions found: \"${dups[0]}\"`;\n        }\n        if(!isUniq(positions)){\n          let dups = _(positions).groupBy().pickBy(x => x.length > 1).keys().value()\n          throw `Duplicate game positions found: \"${dups[0]}. \"`;\n        }\n        if((_.max(positions) || 0) > gameNames.length){\n          throw `Game position out of range: \"${_.max(positions)}. \" found but only ${gameNames.length} games`;\n        }\n        const gamesNoPos = _.difference(gameNames, gamesWithPos)\n        const unusedPos = _.difference(_.range(1,gameNames.length+1), positions)\n        games = Array(gameNames.length)\n        gamesWithPos.map(x => games[game2position[x]-1] = {name: x.substr(x.indexOf(\".\")+1).trim(), fixedPosition: true})\n        gamesNoPos.map((x,index) => games[unusedPos[index]-1] = {name: x, fixedPosition: false})\n      }\n      return games\n    }\n    getPlayersFromText: (text: string) => Array<Player> = (text) => {\n      return text.split('\\n').filter(x => x.trim().length>0).map((word) => {return {name: word, active: true}})\n    }\n    getDuplicatePlayers: (players: Array<Player>) => string[] = (players) => {\n      return _.values(_.keys(_.pickBy(_.groupBy(players.map(x => x.name)), x => x.length > 1)))\n    }\n    render() {\n      const {navigate} = this.props.navigation;\n      const fullWidth = Dimensions.get('window').width\n      return (\n        <ThemedSafeAreaView>\n        <Layout style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n          <TouchableWithoutFeedback onPress={() => {Keyboard.dismiss()}}>\n            <PlatformScrollView fullWidth={fullWidth}>\n              <Text category=\"h1\" style={{flex: 1, textAlign: 'center', margin: 15}}>X</Text>\n              <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between'}}>\n                <Text category=\"h3\">Players</Text>\n                <TouchableWithoutFeedback onPress={() => Alert.alert(\"Players\",\"Enter all players: one per line.\\nFeel free to use emojis 😈\")}>\n                  <Icon name=\"question-mark-circle\" width={32} height={32} fill=\"#fff\"/>\n                </TouchableWithoutFeedback>\n              </View>\n              <Input multiline={true} scrollEnabled={false} onChangeText={(text) => this.setState({playerText: text})} value={this.state.playerText}></Input>\n              <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between'}}>\n                <Text category=\"h3\">Games</Text>\n                <TouchableWithoutFeedback onPress={() => \n                    Alert.alert(\n                      \"Games\",\n                      \"Enter all games you want to play: one per line. \"+\n                      \"This app does not contain any games you have to play all the games in real life. \"+\n                      \"Keep in mind that you play each game in two teams. \"+\n                      \"Popular choices include:\\nDarts 🎯\\nLiar's dice 🎲\\nBlack Jack 🃏\\nSnake 🐍\\nTron 🏍\\nBlobby Volley 🏐\\n\"+\n                      \"You can set a game to be played in a fixed position by prepending 'X.' with X being the position, e.g. 1.\")\n                  }>\n                  <Icon name=\"question-mark-circle\" width={32} height={32} fill=\"#fff\"/>\n                </TouchableWithoutFeedback>\n              </View>\n              <Input multiline={true} scrollEnabled={false} onChangeText={(text) => this.setState({gameText: text})} value={this.state.gameText}></Input>\n              <Button\n                  onPress={() => {\n                    try{\n                      let players = this.getPlayersFromText(this.state.playerText);\n                      let duplicates = this.getDuplicatePlayers(players);\n                      let games = this.getGamesFromText(this.state.gameText);\n                      if(players.length < 2){\n                        Alert.alert(\"Please enter at least two players!\")\n                      } else if(duplicates.length > 0){\n                        Alert.alert(\"Duplicate players: \"+duplicates.join(\", \"));\n                      }  else if(games.length == 0){\n                        Alert.alert(\"Please enter at least one game!\");\n                      } else {\n                        this.props.startMatch({\n                          players: players,\n                          games: games,\n                        })\n                        navigate('Leaderboard')\n                      }\n                    } catch(e: any) {\n                      Alert.alert(e.toString());\n                    }\n                    }\n                    }\n                >Start</Button>\n            {[\"ios\", \"android\"].includes(Platform.OS) ? undefined : <Button onPress={() => {this.props.navigation.navigate('Main')}}> Back </Button>}\n            </PlatformScrollView>\n          </TouchableWithoutFeedback>\n        </Layout></ThemedSafeAreaView>\n      );\n    }\n  }\nconst connector = connect((state: State) => state, actions)\ntype PropsFromRedux = ConnectedProps<typeof connector>\nexport default connector(NewMatchScreen)","import { Layout, Text, List, ListItem, Icon, Button } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { View, Dimensions, Alert, Platform, ToastAndroid } from \"react-native\";\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThemedSafeAreaView } from \"../components/ThemedSafeAreaView\";\nimport { State, actions, Match, Game } from \"../store\";\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { RootStackParamList } from \"../App\";\nimport * as Clipboard from \"expo-clipboard\";\n\n// necessary to convert games from String <=v1.0.0 to Game >=v1.1.0\nfunction convertGameTypeFromStringInPlace(match: Omit<Match, 'games'> & { games: Array<string|Game> }){\n  if(typeof match.games[0] === 'string'){\n    match.games = match.games.map(x => {return {name: x.toString(), fixedPosition: false}})\n  }\n  if(typeof match.rounds[0]?.game === 'string'){\n    match.rounds.map(x => x.game = {name: x.game.toString(), fixedPosition: false})\n  }\n}\n\nclass MatchesScreen extends React.Component<NativeStackScreenProps<RootStackParamList,\"Matches\"> & PropsFromRedux,{matches: [string, Match][]}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      matches: []\n    };\n    this.getMatches().then(m => this.setState({matches: m}));\n  }\n  importMatch: () => void = async () => {\n    const m = await Clipboard.getStringAsync() || \"\";\n    try{\n      const match: Match = JSON.parse(m);\n      this.props.loadMatch({\n        players: match.players,\n        games: match.games,\n        rounds: match.rounds,\n        lastChange: match.lastChange,\n        matchId: Date.now(),\n      })\n      this.props.navigation.navigate('Leaderboard');\n    } catch(e) {\n      Alert.alert(\"Error\", \"Could not import match from clipboard\");\n    }\n  }\n  loadMatch: (id: string) => void = async (id) => {\n    const m = await AsyncStorage.getItem(id) || \"\";\n    const match: Match = JSON.parse(m);\n    // necessary to convert games from String <=v1.0.0 to Game >=v1.1.0\n    convertGameTypeFromStringInPlace(match)\n    this.props.loadMatch({\n      players: match.players,\n      games: match.games,\n      rounds: match.rounds,\n      lastChange: match.lastChange,\n      matchId: parseInt(id.substr(7)),\n    })\n    this.props.navigation.navigate('Leaderboard');\n  }\n  removeMatch: (id: string) => void = async (id) => {\n    await AsyncStorage.removeItem(id);\n    // reset current match so it is not re-created if it was the deleted one\n    this.props.reset()\n    this.getMatches().then(m => this.setState({matches: m}));\n  }\n  getMatches = async () => {\n    let matches: [string, Match][] = []\n    try {\n      let keys = await AsyncStorage.getAllKeys()\n      let raw_matches = await AsyncStorage.multiGet(keys.filter(x => x.startsWith(\"@match:\")))\n      matches = raw_matches.map(x => [x[0], JSON.parse(x[1]||\"\") as Match])\n      matches.sort((a,b) => b[1].lastChange - a[1].lastChange)\n    } catch(e) {\n      console.error(e)\n    }\n    return matches;\n  }\n  render() {\n    const fullWidth = Dimensions.get('window').width;\n    return (\n      <ThemedSafeAreaView>\n      <Layout style={{flex: 1}}>\n        <View style={{flex: 1, width: fullWidth, justifyContent: \"space-around\", alignItems: \"center\", padding: 15}}>\n          <Text category=\"h1\">Matches</Text>\n          <List data={this.state.matches} renderItem={({item}: {item: [string, Match]}) => {\n              let key = item[0];\n              let match = item[1];\n                return(\n                  <ListItem onPress={() => {\n                    if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n                      this.loadMatch(key)\n                    } else {\n                      if(window.confirm(\"Load match?\")){\n                        this.loadMatch(key);\n                      } else if(window.confirm(\"Delete match?\")){\n                        this.removeMatch(key);\n                      }\n                    }\n                  }\n                  } onLongPress={() => {\n                    Alert.alert(\n                      'Export or Remove Match?',\n                      'Export copies to clipboard, removing can not be undone',\n                      [\n                        {text: 'Export', onPress: () => {\n                          AsyncStorage.getItem(key).then(\n                            m => Clipboard.setString(m || \"\")).then(\n                              () => {\n                                if(Platform.OS === \"android\"){\n                                  ToastAndroid.show(\"Copied to clipboard\", ToastAndroid.SHORT);\n                                }\n                              }\n                            );\n                        }},\n                        {text: 'Remove', onPress: () => Alert.alert(\n                          \"Do you really want to remove?\", \"This can not be undone\",\n                          [{text: 'Remove', onPress: () => this.removeMatch(key), style: 'destructive'},\n                          {text: 'Cancel', style: 'cancel'}]\n                          )},\n                        {\n                          text: 'Cancel',\n                          style: 'cancel',\n                        },\n                      ],\n                      {cancelable: true},\n                    );\n                    \n                    \n                    }}>\n                    <MatchEntry match={match}/>\n                  </ListItem>\n                )}} keyExtractor={x => x[0]}/>\n            <View style={{flexDirection: \"row\", justifyContent: \"space-around\", alignSelf: \"stretch\"}}>\n            <Button onPress={() => {this.props.navigation.navigate('Main')}}> Back </Button>\n            <Button onPress={this.importMatch}> Import </Button>\n            </View>\n        </View>\n      </Layout>\n      </ThemedSafeAreaView>\n    );\n  }\n}\n\nconst connector = connect((state: State) => state, actions)\ntype PropsFromRedux = ConnectedProps<typeof connector>\nexport default connector(MatchesScreen)\n\nclass MatchEntry extends React.Component<{match: Match}, {}> {\n  render() {\n    const {rounds, players, lastChange, games} = this.props.match;\n    const gameIndex = rounds.length-1;\n    const gameRunning = gameIndex >= 0 && rounds[gameIndex].winner == -1;\n    const isOver = rounds.length >= games.length && !gameRunning;\n    const appearance = isOver ? \"hint\" : \"default\";\n    const lastPlayed = new Date(lastChange).toDateString();\n    const currentGame = gameIndex + (gameRunning ? 0 : 1)\n    return (\n      <View style={{flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between',}}>\n        <Text category=\"h4\" appearance={appearance}>{isOver ? '🏆' : currentGame+'/'+games.length}</Text>\n        <View style={{flex: 1, marginLeft: 10}}><Text category=\"h4\" appearance={appearance}>{lastPlayed}</Text></View>\n        <Icon name='people-outline' width={30} height={30} fill=\"#fff\"/>\n        <Text category=\"h3\" appearance={appearance}>{\" \"+players.length}</Text>\n      </View>\n    );\n  }\n}","import 'react-native-gesture-handler';\nimport { dark as darkTheme, mapping } from '@eva-design/eva';\nimport { ApplicationProvider, IconRegistry } from '@ui-kitten/components';\nimport { EvaIconsPack } from '@ui-kitten/eva-icons';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport AboutScreen from './screens/AboutScreen';\nimport GameScreen from './screens/GameScreen';\nimport LeaderboardScreen from './screens/LeaderboardScreen';\nimport MainScreen from './screens/MainScreen';\nimport NewMatchScreen from './screens/NewMatchScreen';\nimport { persistor, store } from './store';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport MatchesScreen from './screens/MatchesScreen';\n\nconst Stack = createNativeStackNavigator();\n\nexport type RootStackParamList = {\n  Main: undefined;\n  About: undefined;\n  Game: undefined;\n  NewMatch: undefined;\n  Matches: undefined;\n  Leaderboard: undefined;\n};\n\nconst App = () => (\n  <React.Fragment>\n    <IconRegistry icons={EvaIconsPack} />\n    <ApplicationProvider mapping={mapping} theme={darkTheme}>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <NavigationContainer>\n            <Stack.Navigator initialRouteName=\"Main\" screenOptions={{ headerShown: false }}>\n              <Stack.Screen name=\"Main\" component={MainScreen} />\n              <Stack.Screen name=\"About\" component={AboutScreen} />\n              <Stack.Screen name=\"Game\" component={GameScreen} />\n              <Stack.Screen name=\"NewMatch\" component={NewMatchScreen} />\n              <Stack.Screen name=\"Leaderboard\" component={LeaderboardScreen} />\n              <Stack.Screen name=\"Matches\" component={MatchesScreen} />\n            </Stack.Navigator>\n          </NavigationContainer>\n        </PersistGate>\n      </Provider>\n    </ApplicationProvider>\n  </React.Fragment>\n  );\n\nstore.subscribe(() => {\n  const state = store.getState();\n  if(state.matchId>0){\n    try {\n      AsyncStorage.setItem('@match:'+state.matchId, JSON.stringify({\n        players: state.players,\n        games: state.games,\n        rounds: state.rounds,\n        lastChange: state.lastChange,\n      }));\n    } catch (error) {\n      console.error(error)\n    }\n  }\n})\n\nexport default App;"],"sourceRoot":""}